{
    "fileTypes": [
        "mac"
    ], 
    "name": "RStyle", 
    "patterns": [
        {
            "captures": {
                "1": {
                    "name": "constant.numeric.mac"
                }
            }, 
            "comment": "Tab stops like $1, $2...", 
            "match": "\\$(\\d+)", 
            "name": "keyword.mac"
        }, 
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b", 
            "name": "constant.numeric.mac"
        }, 
        {
            "begin": "(\\$)(\\{)([0-9]+):", 
            "beginCaptures": {
                "1": {
                    "name": "keyword.mac"
                }, 
                "3": {
                    "name": "constant.numeric.mac"
                }
            }, 
            "end": "\\}", 
            "name": "variable.complex.mac", 
            "patterns": [
                {
                    "include": "$self"
                }, 
                {
                    "match": ".", 
                    "name": "string.mac"
                }
            ]
        }, 
        {
            "match": "\\\\(\\$|\\>|\\<)", 
            "name": "constant.character.escape.mac"
        }, 
        {
            "match": "(\\$)", 
            "name": "invalid.mac"
        }, 
        {
            "begin": "/\\*", 
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.mac"
                }
            }, 
            "end": "\\*/", 
            "name": "comment.block.mac"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.mac"
                }
            }, 
            "match": "(//).*$\\n?", 
            "name": "comment.line.double-slash.mac"
        }, 
        {
            "captures": {
                "1": {
                    "name": "storage.type.function.mac"
                }, 
                "2": {
                    "name": "entity.name.function.mac"
                }, 
                "3": {
                    "name": "punctuation.definition.parameters.begin.mac"
                }, 
                "4": {
                    "name": "variable.parameter.function.mac"
                }, 
                "5": {
                    "name": "punctuation.definition.parameters.end.mac"
                }
            }, 
            "comment": "match regular function like: function myFunc(arg) { \u2026 }", 
            "match": "\\b(macro|Macro)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))", 
            "name": "meta.function.mac"
        }, 
        {
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.mac"
                }
            }, 
            "end": "\"", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.mac"
                }
            }, 
            "name": "string.quoted.double.mac", 
            "patterns": [
                {
                    "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)", 
                    "name": "constant.character.escape.mac"
                }
            ]
        }, 
        {
            "match": "\\b(bool|Object|class|double|string|cpwin|macro|int|var|(M|m)oney|(F|f)ields|(V|v)alue)\\b", 
            "name": "storage.type.mac"
        }, 
        {
            "match": "\\b(const|export|private|public|static)\\b", 
            "name": "storage.modifier.mac"
        }, 
        {
            "match": "\\b(break|continue|else|elif|for|if|import|package|return|(W|w)hile|key|keys|(E(nd|ND)|end))\\b", 
            "name": "keyword.control.mac"
        }, 
        {
            "match": "\\btrue\\b", 
            "name": "constant.language.boolean.true.mac"
        }, 
        {
            "match": "\\bfalse\\b", 
            "name": "constant.language.boolean.false.mac"
        }, 
        {
            "match": "\\bnull\\b", 
            "name": "constant.language.null.mac"
        }, 
        {
            "match": "\\b(super|this)\\b", 
            "name": "variable.language.mac"
        }, 
        {
            "match": "\\b(debugbreak)\\b", 
            "name": "keyword.other.mac"
        }, 
        {
            "match": "\\b(CoMainLite|CoMain|Array|TArray|TArrayEx|TCollection|Date|Form|Frame|macro|GenObject|Number|Object|Option|Packages|Password|Plugin|Radio|RegExp|Reset|Select|String|Style|Submit|screen|sun|Text|Caption|window|XMLHttpRequest)\\b", 
            "name": "support.class.mac"
        }, 
        {
            "match": "\\b((O|o)nerror|AbortTrn|Abs|GetD(s|S)|MsgBoxErr|GetFullD(s|S)|GetData|DateToString|FirstDayMonth|MarkRow|LastDayMonth|CmdArgs|DtTm|DtTmSplit|GetComputerName|ParseString|IsValueInList|SimpleIf|DateShift|Datesplit|Double|Exec(Macro|Macro2|MacroFile)|GenClassName|GenEnum|GetDouble|GetInt|GetMoney|GetString|GetStringR|GetTrue|Item|Max|MsgBox|DoubleL|Double|Int|Money|Round|Run|SubObjects|RunError|RunMenu|SelectFile|StrBrk|StrFor|StrLen|StrLwr|StrSet|StrSplit|StrSplit2|StrSubst|StrUpr|SubStr|TEnumArray|TestEvent|Time|Date|TimeSplit|ToANSI|ToOEM|TRecHandler|Trim)\\b(?=\\()", 
            "name": "support.function.mac"
        }, 
        {
            "comment": "keyword operators that evaluate to True or False", 
            "match": "\\b(and|in|is|(N|n)ot|NOT|or)\\b", 
            "name": "keyword.operator.logical.mac"
        }, 
        {
            "match": "%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|==|=|!=|<=|>=|<>|<|>|!|\\|\\||\\?\\:|\\*=|/=|%=|\\+=|\\-=|&=|\\^=|\\b(normal|append|blob)\\b", 
            "name": "keyword.operator.mac"
        }, 
        {
            "begin": "(?<=[=(:]|^|return|&&|\\|\\||!)\\s*(/)(?![/*+{}?])", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.mac"
                }
            }, 
            "end": "(/)[igm]*", 
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.mac"
                }
            }, 
            "name": "string.regexp.mac", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "name": "constant.character.escape.mac"
                }
            ]
        }, 
        {
            "match": "\\;", 
            "name": "punctuation.terminator.statement.mac"
        }, 
        {
            "match": ",[ |\\t]*", 
            "name": "meta.delimiter.object.comma.mac"
        }, 
        {
            "match": "\\.", 
            "name": "meta.delimiter.method.period.mac"
        }, 
        {
            "match": "\\{|\\}", 
            "name": "meta.brace.curly.mac"
        }, 
        {
            "match": "\\(|\\)", 
            "name": "meta.brace.round.mac"
        }, 
        {
            "match": "\\[|\\]", 
            "name": "meta.brace.square.mac"
        }
    ], 
    "scopeName": "source.mac", 
    "uuid": "f24766ec-8d6d-423b-8b09-3f9939e4ff02"
}